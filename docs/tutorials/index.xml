<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Myriad</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/</link><description>Recent content in Tutorials on Myriad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://moiraesoftware.github.io/myriad/docs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration And Plugins</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/configuration/</guid><description>Configuration Myriad uses a configuration file called myriad.toml which uses the toml format. Myriad looks in the current directory fro this file but it can be configured by placing MyriadConfigFile in your project file like this:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;Project Sdk=&amp;#34;Microsoft.NET.Sdk&amp;#34;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt; &amp;lt;MyriadConfigFile&amp;gt;myConfig.toml&amp;lt;/MyriadConfigFile&amp;gt; &amp;lt;/PropertyGroup&amp;gt; ... The configuration section for the built in plugins is very simple, the configuration name or key is passed in by either the plugins generator attribute, in the case of the fields plugin:</description></item><item><title>Debugging</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/debugging/</guid><description>Debugging To debug Myriad, you can use the following two command line options:
--verbose — write diagnostic logs out to standard out --wait-for-debugger — causes Myriad to wait for a debugger to attach to the Myriad process These can be triggered from msbuild by the &amp;lt;MyriadSdkVerboseOutput&amp;gt;true&amp;lt;/MyriadSdkVerboseOutput&amp;gt; and &amp;lt;MyriadSdkWaitForDebugger&amp;gt;true&amp;lt;/MyriadSdkWaitForDebugger&amp;gt; properties, respectively.</description></item><item><title>External Plugins</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/external-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/external-plugins/</guid><description>Using external plugins To consume external plugins that aren&amp;rsquo;t included in the Myriad.Plugins package, you must register them with Myriad. If you are using the CLI tool then the way to do this is by passing in the --plugin &amp;lt;path to dll&amp;gt; command-line argument. If you are using MSBuild then this can be done by adding to the MyriadSdkGenerator property to your project file:
&amp;lt;ItemGroup&amp;gt; &amp;lt;MyriadSdkGenerator Include=&amp;#34;&amp;lt;path to plugin dll&amp;gt;&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; For example, if you had a project layout like this:</description></item><item><title>MSBuild usage</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/msbuild-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/msbuild-usage/</guid><description>MSBuild usage Plugins for Myriad are supplied by simply including the nuget package in your project, the nuget infrastructure supplies the necessary MSBuild props and targets so that the plugin is used by Myriad automatically. Following the source for the fields plugin can be used as reference until more details about authoring plugins is created.
To use Myriad via its MSBuild support you add the Myriad.Core and Myriad.Sdk package references:</description></item></channel></rss>