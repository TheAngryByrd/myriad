<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugins on Myriad</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/</link><description>Recent content in Plugins on Myriad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://moiraesoftware.github.io/myriad/docs/plugins/index.xml" rel="self" type="application/rss+xml"/><item><title>Records</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&amp;lt;Generator.Fields &amp;#34;fields&amp;#34;&amp;gt;] type Test1 = { one: int; two: string; three: float; four: float32 } type Test2 = { one: Test1; two: string } An attribute is used by the fields plugin so that the code generator knows which parts of the input AST should be consumed by the plugin. If you had several records and you only wanted the fields plugin to operate on Test1 then the attribute would be used like in the example about to only apply Generator.</description></item><item><title>Discriminated Unions</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&amp;lt;Generator.DuCases &amp;#34;dus&amp;#34; &amp;gt;] type Currency = | CAD | PLN | EUR | USD | Custom of string An attribute is used by the plugin so that the code generator plugin knows which parts of the input AST are to be used by the plugin. If you had several records and you only wanted the fields plugin to operate on Currency then the attribute would be used like in the example about to only apply Generator.</description></item><item><title>Lenses</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/</guid><description>Myriad can also generate lenses for records and single-case discriminated unions. Lens is a pair of a getter and a setter for one property of the type and allows, given the object, to get the value of the property or to update it creating a new object. The advantage of lenses is an ability to combine them to read or update nested fields of the object.
To create lenses for your type, first annotate the type for which you want lenses to be generated with Generator.</description></item></channel></rss>