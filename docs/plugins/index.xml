<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugins :: Myriad</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/index.html</link><description>The following are some guides on how to use the different plugins included with Myriad.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://moiraesoftware.github.io/myriad/docs/plugins/index.xml" rel="self" type="application/rss+xml"/><item><title>Records</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/index.html</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&lt;Generator.Fields "fields">] type Test1 = { one: int; two: string; three: float; four: float32 } type Test2 = { one: Test1; two: string } An attribute is used by the fields plugin so that the code generator knows which parts of the input AST should be consumed by the plugin. If you had several records and you only wanted the fields plugin to operate on Test1 then the attribute would be used like in the example about to only apply Generator.Fields to the Test1 record. Note, if you wanted a plugin that just processes the whole input then there is no need to provide such an attribute. Myriad aims to be a library rather than a full framework that ties you to the mechanism used to input and generate code, its up to you how you generate the code, Myriad just aims to help to make this as painless and flexible as possible.</description></item><item><title>Discriminated Unions</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/index.html</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&lt;Generator.DuCases "dus" >] type Currency = | CAD | PLN | EUR | USD | Custom of string An attribute is used by the plugin so that the code generator plugin knows which parts of the input AST are to be used by the plugin. If you had several records and you only wanted the fields plugin to operate on Currency then the attribute would be used like in the example about to only apply Generator.DuCases to Currency. Note, if you wanted a plugin that just needs the whole input AST then there is no need to provide an input. Myriad aims to be a library rather than a full framework that ties you to the mechanism used to input and generate code.</description></item><item><title>Lenses</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/index.html</guid><description>Myriad can also generate lenses for records and single-case discriminated unions. Lens is a pair of a getter and a setter for one property of the type and allows, given the object, to get the value of the property or to update it creating a new object. The advantage of lenses is an ability to combine them to read or update nested fields of the object.
To create lenses for your type, first annotate the type for which you want lenses to be generated with Generator.Lenses attribute, note the “lens” parameter specifies which configuration key is used with the plugin, this is used to specify which namespace is generated via the myriad.toml configuration file:</description></item></channel></rss>