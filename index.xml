<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About Myriad on Myriad</title><link>https://moiraesoftware.github.io/myriad/</link><description>Recent content in About Myriad on Myriad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://moiraesoftware.github.io/myriad/index.xml" rel="self" type="application/rss+xml"/><item><title>Records</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/record-fields/</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&amp;lt;Generator.Fields &amp;#34;fields&amp;#34;&amp;gt;] type Test1 = { one: int; two: string; three: float; four: float32 } type Test2 = { one: Test1; two: string } An attribute is used by the fields plugin so that the code generator knows which parts of the input AST should be consumed by the plugin. If you had several records and you only wanted the fields plugin to operate on Test1 then the attribute would be used like in the example about to only apply Generator.</description></item><item><title>Discriminated Unions</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/du-extensions/</guid><description>The input file in this example Library.fs looks like this:
namespace Example open Myriad.Plugins [&amp;lt;Generator.DuCases &amp;#34;dus&amp;#34; &amp;gt;] type Currency = | CAD | PLN | EUR | USD | Custom of string An attribute is used by the plugin so that the code generator plugin knows which parts of the input AST are to be used by the plugin. If you had several records and you only wanted the fields plugin to operate on Currency then the attribute would be used like in the example about to only apply Generator.</description></item><item><title>Lenses</title><link>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/plugins/lenses/</guid><description>Myriad can also generate lenses for records and single-case discriminated unions. Lens is a pair of a getter and a setter for one property of the type and allows, given the object, to get the value of the property or to update it creating a new object. The advantage of lenses is an ability to combine them to read or update nested fields of the object.
To create lenses for your type, first annotate the type for which you want lenses to be generated with Generator.</description></item><item><title>Configuration And Plugins</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/configuration/</guid><description>Configuration Myriad uses a configuration file called myriad.toml which uses the toml format. Myriad looks in the current directory fro this file but it can be configured by placing MyriadConfigFile in your project file like this:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;Project Sdk=&amp;#34;Microsoft.NET.Sdk&amp;#34;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt; &amp;lt;MyriadConfigFile&amp;gt;myConfig.toml&amp;lt;/MyriadConfigFile&amp;gt; &amp;lt;/PropertyGroup&amp;gt; ... The configuration section for the built in plugins is very simple, the configuration name or key is passed in by either the plugins generator attribute, in the case of the fields plugin:</description></item><item><title>Debugging</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/debugging/</guid><description>Debugging To debug Myriad, you can use the following two command line options:
--verbose — write diagnostic logs out to standard out --wait-for-debugger — causes Myriad to wait for a debugger to attach to the Myriad process These can be triggered from msbuild by the &amp;lt;MyriadSdkVerboseOutput&amp;gt;true&amp;lt;/MyriadSdkVerboseOutput&amp;gt; and &amp;lt;MyriadSdkWaitForDebugger&amp;gt;true&amp;lt;/MyriadSdkWaitForDebugger&amp;gt; properties, respectively.</description></item><item><title>External Plugins</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/external-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/external-plugins/</guid><description>Using external plugins To consume external plugins that aren&amp;rsquo;t included in the Myriad.Plugins package, you must register them with Myriad. If you are using the CLI tool then the way to do this is by passing in the --plugin &amp;lt;path to dll&amp;gt; command-line argument. If you are using MSBuild then this can be done by adding to the MyriadSdkGenerator property to your project file:
&amp;lt;ItemGroup&amp;gt; &amp;lt;MyriadSdkGenerator Include=&amp;#34;&amp;lt;path to plugin dll&amp;gt;&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; For example, if you had a project layout like this:</description></item><item><title>External resources</title><link>https://moiraesoftware.github.io/myriad/docs/external-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/external-resources/</guid><description>There is currently an introduction to Myriad and a How to guide on creating a simple generator
Applied Metaprogramming with Myriad and Falanx - This is a video I made for my YouTube channel which covers some details on Myriad.
Myriad Intro - This is a blog post I wrote around the time of Applied Metaprogramming with Myriad and Falanx which has details of making a generator that produces this simple module:</description></item><item><title>MSBuild usage</title><link>https://moiraesoftware.github.io/myriad/docs/tutorials/msbuild-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://moiraesoftware.github.io/myriad/docs/tutorials/msbuild-usage/</guid><description>MSBuild usage Plugins for Myriad are supplied by simply including the nuget package in your project, the nuget infrastructure supplies the necessary MSBuild props and targets so that the plugin is used by Myriad automatically. Following the source for the fields plugin can be used as reference until more details about authoring plugins is created.
To use Myriad via its MSBuild support you add the Myriad.Core and Myriad.Sdk package references:</description></item></channel></rss>